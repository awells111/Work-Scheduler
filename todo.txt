Problem: Application recreates a Connection for each database query. Creating Connections is costly and the application should avoid creating a Connection when possible.
Solution: Use a ConnectionPool.


Problem: Application only syncs data after login. If any changes are made to the database by a second user, the first (and every other) user will have incorrect database information.


Problem: There are 3 different tables (`address`, `city`, `country`) just for a Customer Address. The tables need to be consolidated into one table. `address`should have its `addressId` removed and the primary key should be `customerId`.
Solution: Drop the `city` table and `country` table. Add the missing columns from `city` and `country` to `address`. Make `customerId` the new primary key. Drop the `addressId` from address.

Problem: No autoincrement on primary keys. This means the application picks the id of an object based on the id of the last object in a list. For example, if ArrayList<Customer> Customers has 10 Customers and wants to add another, the application will manually take the 10th Customer's ID and add 1 to it to create the customerId of the 11th Customer. This is only OK if one user uses the application. If multiple users are using the application and one user adds a Customer, no other user will be able to add a Customer because the primary key customerId will already be taken.
Solution: Add autoincrement to tables with their own primary key (currently `customer` and `appointment`). The connection can prepare a statement with the flag {Statement.RETURN_GENERATED_KEYS} which will return the primary key in a resultset.

Problem: No minimum value exceptions are set for any field.

Problem: No maximum value exceptions are set in accordance with the database.

Problem: The application is currently retrieving the DATETIME as a String, then converting it back and forth between a LocalDateTime and a String.
Solution: The TimeStamp should be retrieved from the database, then converted into a LocalDateTime and placed into the Appointment object.